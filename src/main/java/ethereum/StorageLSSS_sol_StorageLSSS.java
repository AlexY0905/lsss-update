package ethereum;

import java.math.BigInteger;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import java.util.concurrent.Callable;
import org.web3j.abi.TypeReference;
import org.web3j.abi.datatypes.Address;
import org.web3j.abi.datatypes.Bool;
import org.web3j.abi.datatypes.DynamicArray;
import org.web3j.abi.datatypes.Function;
import org.web3j.abi.datatypes.Type;
import org.web3j.abi.datatypes.Utf8String;
import org.web3j.abi.datatypes.generated.Bytes32;
import org.web3j.abi.datatypes.generated.Uint256;
import org.web3j.crypto.Credentials;
import org.web3j.protocol.Web3j;
import org.web3j.protocol.core.RemoteCall;
import org.web3j.protocol.core.RemoteFunctionCall;
import org.web3j.protocol.core.methods.response.TransactionReceipt;
import org.web3j.tuples.generated.Tuple2;
import org.web3j.tx.Contract;
import org.web3j.tx.TransactionManager;
import org.web3j.tx.gas.ContractGasProvider;

/**
 * <p>Auto generated code.
 * <p><strong>Do not modify!</strong>
 * <p>Please use the <a href="https://docs.web3j.io/command_line.html">web3j command line tools</a>,
 * or the org.web3j.codegen.SolidityFunctionWrapperGenerator in the 
 * <a href="https://github.com/web3j/web3j/tree/master/codegen">codegen module</a> to update.
 *
 * <p>Generated with web3j version 4.5.16.
 */
@SuppressWarnings("rawtypes")
public class StorageLSSS_sol_StorageLSSS extends Contract {
    public static final String BINARY = "";

    public static final String FUNC_AC = "AC";

    public static final String FUNC_CHECKHASH_FILEID = "checkHash_FileId";

    public static final String FUNC_DATAOWNER = "dataOwner";

    public static final String FUNC_DUATT = "duatt";

    public static final String FUNC_DUV = "duv";

    public static final String FUNC_GETCIPHERTEXT = "getCipherText";

    public static final String FUNC_GETDATA = "getData";

    public static final String FUNC_GETINTERVAL = "getInterval";

    public static final String FUNC_GETPK = "getPK";

    public static final String FUNC_GETSECRETKEY = "getSecretKey";

    public static final String FUNC_GETV = "getV";

    public static final String FUNC_OWNER = "owner";

    public static final String FUNC_PUB_DATA = "pub_data";

    public static final String FUNC_SEARCHDATA = "searchData";

    public static final String FUNC_SERIALIZATIONDATA = "serializationData";

    public static final String FUNC_SETCIPHERTEXT = "setCipherText";

    public static final String FUNC_SETHASH_FILEID = "setHash_FileId";

    public static final String FUNC_SETINTERVAL = "setInterval";

    public static final String FUNC_SETPK = "setPK";

    public static final String FUNC_SETSECRETKEY = "setSecretKey";

    public static final String FUNC_USERS = "users";

    @Deprecated
    protected StorageLSSS_sol_StorageLSSS(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    protected StorageLSSS_sol_StorageLSSS(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, credentials, contractGasProvider);
    }

    @Deprecated
    protected StorageLSSS_sol_StorageLSSS(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    protected StorageLSSS_sol_StorageLSSS(String contractAddress, Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public RemoteFunctionCall<Address> AC() {
        final Function function = new Function(FUNC_AC, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function);
    }

    public RemoteFunctionCall<Bool> checkHash_FileId(Bytes32 Hash_Id_param) {
        final Function function = new Function(FUNC_CHECKHASH_FILEID, 
                Arrays.<Type>asList(Hash_Id_param), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function);
    }

    public RemoteFunctionCall<Tuple2<Bytes32, Utf8String>> dataOwner(Bytes32 param0) {
        final Function function = new Function(FUNC_DATAOWNER, 
                Arrays.<Type>asList(param0), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}, new TypeReference<Utf8String>() {}));
        return new RemoteFunctionCall<Tuple2<Bytes32, Utf8String>>(function,
                new Callable<Tuple2<Bytes32, Utf8String>>() {
                    @Override
                    public Tuple2<Bytes32, Utf8String> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple2<Bytes32, Utf8String>(
                                (Bytes32) results.get(0), 
                                (Utf8String) results.get(1));
                    }
                });
    }

    public RemoteFunctionCall<Utf8String> duatt(Address param0, Uint256 param1) {
        final Function function = new Function(FUNC_DUATT, 
                Arrays.<Type>asList(param0, param1), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeRemoteCallSingleValueReturn(function);
    }

    public RemoteFunctionCall<Utf8String> duv(Address param0) {
        final Function function = new Function(FUNC_DUV, 
                Arrays.<Type>asList(param0), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeRemoteCallSingleValueReturn(function);
    }

    public RemoteFunctionCall<Utf8String> getCipherText(Bytes32 Hash_Id_param) {
        final Function function = new Function(FUNC_GETCIPHERTEXT, 
                Arrays.<Type>asList(Hash_Id_param), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeRemoteCallSingleValueReturn(function);
    }

    public RemoteFunctionCall<DynamicArray<Utf8String>> getData(Address duaddress_param) {
        final Function function = new Function(FUNC_GETDATA, 
                Arrays.<Type>asList(duaddress_param), 
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<Utf8String>>() {}));
        return executeRemoteCallSingleValueReturn(function);
    }

    public RemoteFunctionCall<Utf8String> getInterval() {
        final Function function = new Function(FUNC_GETINTERVAL, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeRemoteCallSingleValueReturn(function);
    }

    public RemoteFunctionCall<Utf8String> getPK() {
        final Function function = new Function(FUNC_GETPK, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeRemoteCallSingleValueReturn(function);
    }

    public RemoteFunctionCall<Utf8String> getSecretKey() {
        final Function function = new Function(FUNC_GETSECRETKEY, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeRemoteCallSingleValueReturn(function);
    }

    public RemoteFunctionCall<Utf8String> getV(Address duaddress_param) {
        final Function function = new Function(FUNC_GETV, 
                Arrays.<Type>asList(duaddress_param), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeRemoteCallSingleValueReturn(function);
    }

    public RemoteFunctionCall<Address> owner() {
        final Function function = new Function(FUNC_OWNER, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function);
    }

    public RemoteFunctionCall<TransactionReceipt> pub_data(DynamicArray<Utf8String> attribute_param, Utf8String v_param) {
        final Function function = new Function(
                FUNC_PUB_DATA, 
                Arrays.<Type>asList(attribute_param, v_param), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<DynamicArray<Utf8String>> searchData(Utf8String v_param) {
        final Function function = new Function(FUNC_SEARCHDATA, 
                Arrays.<Type>asList(v_param), 
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<Utf8String>>() {}));
        return executeRemoteCallSingleValueReturn(function);
    }

    public RemoteFunctionCall<TransactionReceipt> serializationData(DynamicArray<Utf8String> attributes_param, Utf8String du_v) {
        final Function function = new Function(
                FUNC_SERIALIZATIONDATA, 
                Arrays.<Type>asList(attributes_param, du_v), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> setCipherText(Bytes32 Hash_Id_param, Utf8String CipherText_param) {
        final Function function = new Function(
                FUNC_SETCIPHERTEXT, 
                Arrays.<Type>asList(Hash_Id_param, CipherText_param), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> setHash_FileId(Bytes32 Hash_Id_param) {
        final Function function = new Function(
                FUNC_SETHASH_FILEID, 
                Arrays.<Type>asList(Hash_Id_param), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> setInterval(Address useraddress_param, Utf8String time_param) {
        final Function function = new Function(
                FUNC_SETINTERVAL, 
                Arrays.<Type>asList(useraddress_param, time_param), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> setPK(Utf8String PK_param) {
        final Function function = new Function(
                FUNC_SETPK, 
                Arrays.<Type>asList(PK_param), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> setSecretKey(Address useraddress_param, Utf8String SecretKey_param) {
        final Function function = new Function(
                FUNC_SETSECRETKEY, 
                Arrays.<Type>asList(useraddress_param, SecretKey_param), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<Tuple2<Utf8String, Utf8String>> users(Address param0) {
        final Function function = new Function(FUNC_USERS, 
                Arrays.<Type>asList(param0), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}));
        return new RemoteFunctionCall<Tuple2<Utf8String, Utf8String>>(function,
                new Callable<Tuple2<Utf8String, Utf8String>>() {
                    @Override
                    public Tuple2<Utf8String, Utf8String> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple2<Utf8String, Utf8String>(
                                (Utf8String) results.get(0), 
                                (Utf8String) results.get(1));
                    }
                });
    }

    @Deprecated
    public static StorageLSSS_sol_StorageLSSS load(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return new StorageLSSS_sol_StorageLSSS(contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    @Deprecated
    public static StorageLSSS_sol_StorageLSSS load(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return new StorageLSSS_sol_StorageLSSS(contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    public static StorageLSSS_sol_StorageLSSS load(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        return new StorageLSSS_sol_StorageLSSS(contractAddress, web3j, credentials, contractGasProvider);
    }

    public static StorageLSSS_sol_StorageLSSS load(String contractAddress, Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        return new StorageLSSS_sol_StorageLSSS(contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public static RemoteCall<StorageLSSS_sol_StorageLSSS> deploy(Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        return deployRemoteCall(StorageLSSS_sol_StorageLSSS.class, web3j, credentials, contractGasProvider, BINARY, "");
    }

    public static RemoteCall<StorageLSSS_sol_StorageLSSS> deploy(Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        return deployRemoteCall(StorageLSSS_sol_StorageLSSS.class, web3j, transactionManager, contractGasProvider, BINARY, "");
    }

    @Deprecated
    public static RemoteCall<StorageLSSS_sol_StorageLSSS> deploy(Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return deployRemoteCall(StorageLSSS_sol_StorageLSSS.class, web3j, credentials, gasPrice, gasLimit, BINARY, "");
    }

    @Deprecated
    public static RemoteCall<StorageLSSS_sol_StorageLSSS> deploy(Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return deployRemoteCall(StorageLSSS_sol_StorageLSSS.class, web3j, transactionManager, gasPrice, gasLimit, BINARY, "");
    }
}
